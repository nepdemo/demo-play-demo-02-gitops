apiVersion: tekton.dev/v1beta1
kind: Task
metadata:
  name: kaniko-{{ .Values.app.name }}
  labels:
    app.kubernetes.io/version: "0.6"
  annotations:
    tekton.dev/pipelines.minVersion: "0.17.0"
    tekton.dev/categories: Image Build
    tekton.dev/tags: image-build
    tekton.dev/displayName: "Build and upload container image using Kaniko"
    tekton.dev/platforms: "linux/amd64,linux/arm64,linux/ppc64le"
spec:
  description: >-
    This Task builds a simple Dockerfile with kaniko and pushes to a registry.
    This Task stores the image name and digest as results, allowing Tekton Chains to pick up
    that an image was built & sign it.
  params:
    - name: IMAGE
      description: Name (reference) of the image to build.
    - name: DOCKERFILE
      description: Path to the Dockerfile to build.
      default: ./Dockerfile
    - name: DOCKER_CONFIG
      default: /kaniko/.docker
    - name: CONTEXT
      description: The build context used by Kaniko.
      default: ./
    - name: EXTRA_ARGS
      type: array
      default: []
    - name: BUILDER_IMAGE
      description: The image on which builds will run (default is v1.5.1)
      # default: gcr.io/kaniko-project/executor:v1.5.1@sha256:c6166717f7fe0b7da44908c986137ecfeab21f31ec3992f6e128fff8a94be8a5
      # default: gcr.io/kaniko-project/executor:v1.23.2-debug
      default: gcr.io/kaniko-project/executor:v1.5.1-debug
  workspaces:
    - name: source
      description: Holds the context and Dockerfile
    - name: dockerconfig
      description: Includes a docker `config.json`
      optional: true
      mountPath: /kaniko/.docker
  results:
    - name: IMAGE_DIGEST
      description: Digest of the image just built.
    - name: IMAGE_URL
      description: URL of the image just built.
  steps:
    - name: build-and-push
      workingDir: $(workspaces.source.path)
      image: $(params.BUILDER_IMAGE)
      # Generate a tag using current date (YYYYMMDD) and a random number
      script: |
        # Extract image name without tag
        IMAGE_WITHOUT_TAG=$(echo "$(params.IMAGE)" | cut -d ':' -f 1)
        # Generate tag with date and random number
        DATE_TAG=$(date +%Y%m%d)-$(shuf -i 1000-9999 -n 1)
        # Set the full image name with new tag
        FULL_IMAGE="${IMAGE_WITHOUT_TAG}:${DATE_TAG}"
        # Save for later steps
        echo "${FULL_IMAGE}" > /tmp/image-name
        echo "${DATE_TAG}" > /tmp/image-tag
      # Continue with the build after generating the tag
      args:
        - $(params.EXTRA_ARGS)
        - --dockerfile=$(params.DOCKERFILE)
        - --context=$(workspaces.source.path)/$(params.CONTEXT) # The user does not need to care the workspace and the source.
        - --destination=$(cat /tmp/image-name)
        - --digest-file=$(results.IMAGE_DIGEST.path)
        - --skip-tls-verify
        # - --ignore-path=/usr/bin/newuidmap
        # - --ignore-path=/usr/bin/newgidmap
      # kaniko assumes it is running as root, which means this example fails on platforms
      # that default to run containers as random uid (like OpenShift). Adding this securityContext
      # makes it explicit that it needs to run as root.
      securityContext:
        runAsUser: 0
    - name: write-url
      image: registry.access.redhat.com/ubi8
      script: |
        set -e
        # Use the image name with dynamic tag that was generated in the previous step
        image=$(cat /tmp/image-name)
        echo -n "${image}" | tee "$(results.IMAGE_URL.path)"
